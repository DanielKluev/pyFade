# pyproject.toml

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["py_fade*"]

[project]
name = "pyFADE"
version = "0.0.1"
authors = [
  {name="Daniel Kliuev", email="dan.kluev@gmail.com"},
]
description = "A short description of the pyFADE project."
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]

dependencies = [
    "PyQt6>=6.6",
    "qt-material>=2.14",
    "SQLAlchemy>=2.0",
    "numpy>=1.26",
    "tiktoken>=0.7",
    "ollama>=0.2",
    "pyyaml>=6.0",
    "pandas>=2.3",
    "pyarrow>=15.0",
    "zstandard>=0.21",
    "msgpack>=1.1",
]

[project.urls]
"Homepage" = "https://github.com/DanielKluev/pyFade"
"Bug Tracker" = "https://github.com/DanielKluev/pyFade/issues"

[project.optional-dependencies]
dev = [ 
  "yapf>=0.40.0", 
  "ruff>=0.6.9", 
  "pytest", 
  "pytest-qt", 
  "pylint", 
  "pyqt6-stubs",
  "mypy",
  "types-PyYAML",
]

# -------------------------------------------------------------------
# YAPF configuration section

[tool.yapf]
# This section contains the configuration for the YAPF formatter.
# It's tuned to keep code dense, especially function signatures.
based_on_style = "google" 
column_limit = 140
split_before_named_assigns = false
coalesce_brackets = true
dedent_closing_brackets = false

# -------------------------------------------------------------------
# Pylint configuration section

[tool.pylint.MASTER]
extension-pkg-allow-list = ["PyQt6"]

[tool.pylint.MISC]
# Allow PyQt6 modules to be imported
known-third-party = ["PyQt6"]

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "R0902",  # too-many-instance-attributes
    "R0914",  # too-many-locals
    "R0913",  # too-many-arguments
    "R0912",  # too-many-branches
    "R0915",  # too-many-statements
    "R0917",  # too-many-positional-arguments
    "R0903",  # too-few-public-methods
    "R0801",  # duplicate-code - common test setup patterns cause false positives
]

[tool.pylint.REPORTS]
score = true

[tool.pylint.FORMAT]
max-line-length = 140

# -------------------------------------------------------------------
# Pytest configuration section

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# -------------------------------------------------------------------
# Ruff configuration section

[tool.ruff]
line-length = 140
target-version = "py311"

[tool.ruff.lint]
select = [
    "ALL", # include all the rules, including new ones
]
ignore = [
    "F401",  # ignore unused imports
    "D212",  # ignore "Multi-line docstring summary should start at the first line" - intentional style choice
    "D200",  # ignore "One-line docstring should fit on one line" - intentional style choice
    "I001",  # ignore "Import statements are in the wrong order" - intentional style choice
    "EM101",  # ignore "Exception must not use a string literal, assign to variable first" - intentional, too verbose otherwise
    "EM102",  # ignore "Exception must not use an f-string literal, assign to variable first" - intentional, too verbose otherwise
    "TRY003", # ignore "Avoid specifying long messages outside the exception class" - intentional, too verbose otherwise
    "ANN003", # ignore "Missing type annotation for `**kwargs`" - meaningless in many cases
    "ANN204", # ignore "Missing return type annotation for special method `__init__`" - no need for __init__
    "ARG002", # ignore "Unused method argument: `kwargs`" - intentional in many cases
    "RET504", # ignore "Unnecessary assignment to `result` before `return` statement" - sometimes useful for debugging
]
